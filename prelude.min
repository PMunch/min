; Imports
'str       import
'io        import
'logic     import
'num       import
'sys       import
'time      import
'fs        import
'crypto    import

; Aliases
'define       ::
'bind         :@
'exit         :quit
'==           :eq
'!=           :noteq
'>            :gt
'<            :lt
'>=           :gte
'<=           :lte
'puts         :echo
'system       :!
'run          :&
'getenv       :$
'call         :^
'interpolate  :%
'pop          :zap
'quote        :unit
'quote        :'
'unquote      :i
'unquote      :apply
'unquote      :->
'scope        :=>
'filter       :select
'cons         :prepend
'size         :length
'regex        :=~

; Mathematical Operators
(1 +)           :succ
(1 -)           :pred
(2 mod 0 ==)    :even?
(even? not)     :odd?


; Stack Operators
(swap cons)                       :swons
((pop) dip)                       :popd
((dup) dip)                       :dupd
((swap) dip)                      :swapd
((dup) dip i)                     :q
((zap) dip i)                     :k
((cons) dip i)                    :b
((swap) dip i)                    :c
((dip) cons cons)                 :take
(() cons dip)                     :dig1
(() cons cons dip)                :dig2
(() cons cons cons dip)           :dig3
((() cons) dip swap i)            :bury1
((() cons cons) dip swap i)       :bury2
((() cons cons cons) dip swap i)  :bury3

; Other
(print pop)                                                   :print!
(dprint pop)                                                  :dprint!
(puts pop)                                                    :puts!
(call pop)                                                    :call!
(:ms :q :check (check) (ms sleep q) while)                    :interval
(password aes encode)                                         :encrypt
(decode password aes)                                         :decrypt

; Load all stored symbols

stored-symbols ('load-symbol ROOT with) foreach
