(import)  (#)     sigil

; Imports
#str
#io
#logic
#num
#stack
#sys
#time

; Common sigils
(bind)    (:)     sigil 
(let)     (.)     sigil 
(getenv)  ($)     sigil 
(system)  (!)     sigil 
(run)     (&)     sigil
(module)  (=)     sigil
(load)    (@)     sigil

; Aliases
'bind        ::
'let         :.
'module      :=
'import      :#
'exit        :quit
'concat      :,
'print       :%
'==          :eq
'!=          :noteq
'>           :gt
'<           :lt
'>=          :gte
'<=          :lte
'puts        :echo
'system      :!
'run         :&
'getenv      :$
'pop         :zap
'quote       :unit
'quote       :'
'unquote     :i
'unquote     :apply
'unquote     :->
'filter      :select
'clear       :empty
'cons        :prepend
'match       :~

; Mathematical Operators
(1 +)           :succ
(1 -)           :pred
(2 mod 0 ==)    :even?
(even? not)     :odd?

((dup 0 ==) (1 +) (dup 1 -) ( * ) linrec) :factorial

; Stack Operators
(swap cons)                       :swons
((pop) dip)                       :popd
((dup) dip)                       :dupd
((swap) dip)                      :swapd
((dup) dip i)                     :q
((zap) dip i)                     :k
((cons) dip i)                    :b
((swap) dip i)                    :c
((dip) cons cons)                 :take
(() cons dip)                     :dig1
(() cons cons dip)                :dig2
(() cons cons cons dip)           :dig3
((() cons) dip swap i)            :bury1
((() cons cons) dip swap i)       :bury2
((() cons cons cons) dip swap i)  :bury3

; Other
(print pop)    :print!
(puts pop)     :puts!

